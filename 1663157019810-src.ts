import { MigrationInterface, QueryRunner } from "typeorm";

export class src1663157019810 implements MigrationInterface {
    name = 'src1663157019810'

    public async up(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`CREATE TABLE "hubs" ("ContentID" uuid NOT NULL DEFAULT uuid_generate_v4(), "isDeleted" boolean NOT NULL DEFAULT true, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "lastChangedDateTime" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "UserID" character varying(50) NOT NULL, "ContractID" character varying(50) NOT NULL, "NameTr" character varying(50) NOT NULL, "NameEn" character varying(50) NOT NULL, "HourType" character varying(50) NOT NULL, "HubIP" character varying(50) NOT NULL, "HubPort" character varying(50) NOT NULL, "HubCheck" boolean NOT NULL DEFAULT false, "ProjectImage" character varying(150) NOT NULL, CONSTRAINT "PK_f28f66af37b189b35bc9db3a134" PRIMARY KEY ("ContentID"))`);
        await queryRunner.query(`CREATE TABLE "hubGroupLogs" ("ContentID" uuid NOT NULL DEFAULT uuid_generate_v4(), "LogContent" character varying(350) NOT NULL, "LogTitle" character varying(350) NOT NULL, "LogDescription" character varying(350) NOT NULL, "LogStatus" character varying(50) NOT NULL, "isDeleted" boolean NOT NULL DEFAULT true, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "lastChangedDateTime" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "HubGroupId" character varying(50) NOT NULL, CONSTRAINT "PK_ae64f7087d60bb88b74ce175a62" PRIMARY KEY ("ContentID"))`);
        await queryRunner.query(`CREATE TABLE "hubDateHour" ("ContentID" uuid NOT NULL DEFAULT uuid_generate_v4(), "isDeleted" boolean NOT NULL DEFAULT true, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "lastChangedDateTime" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "HubId" character varying(50) NOT NULL, "Date" character varying(50) NOT NULL, "Hour" character varying(50) NOT NULL, CONSTRAINT "PK_c154bf1175132be167f75c088c7" PRIMARY KEY ("ContentID"))`);
        await queryRunner.query(`CREATE TABLE "hubGroups" ("ContentID" uuid NOT NULL DEFAULT uuid_generate_v4(), "isDeleted" boolean NOT NULL DEFAULT true, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "lastChangedDateTime" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "HubId" character varying(50) NOT NULL, "GroupId" character varying(50) NOT NULL, "NameTr" character varying(50) NOT NULL, "NameEn" character varying(50) NOT NULL, "DeviceTypes" character varying(50) NOT NULL, "ValveCheck" boolean NOT NULL DEFAULT false, CONSTRAINT "PK_9d6dfb6535fb9b38a914dc345e7" PRIMARY KEY ("ContentID"))`);
        await queryRunner.query(`CREATE TABLE "hubSetup" ("ContentID" uuid NOT NULL DEFAULT uuid_generate_v4(), "isDeleted" boolean NOT NULL DEFAULT true, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "lastChangedDateTime" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "HubId" character varying(50) NOT NULL, "HubDeviceId" character varying(50) NOT NULL, "ServerIP" character varying(50) NOT NULL, "ServerIPEeprom" character varying(50) NOT NULL, "ServerPort" character varying(50) NOT NULL, "ServerPortEeprom" character varying(50) NOT NULL, "TelitClientPort" character varying(50) NOT NULL, "TelitClientPortEeprom" character varying(50) NOT NULL, "InstallationDate" character varying(50) NOT NULL, "InstallationDateEeprom" character varying(50) NOT NULL, "ArmCodeVer" character varying(50) NOT NULL, "ArmCodeVerEeprom" character varying(50) NOT NULL, CONSTRAINT "PK_5311adde42b13dc93745261acca" PRIMARY KEY ("ContentID"))`);
        await queryRunner.query(`CREATE TABLE "hubLogs" ("ContentID" uuid NOT NULL DEFAULT uuid_generate_v4(), "LogContent" character varying(350) NOT NULL, "LogTitle" character varying(350) NOT NULL, "LogDescription" character varying(350) NOT NULL, "LogStatus" character varying(50) NOT NULL, "isDeleted" boolean NOT NULL DEFAULT true, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "lastChangedDateTime" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "HubId" character varying(50) NOT NULL, CONSTRAINT "PK_dba8a26bb55fdfb3083d8e62cf6" PRIMARY KEY ("ContentID"))`);
        await queryRunner.query(`CREATE TABLE "khasSetupByHub" ("ContentID" uuid NOT NULL DEFAULT uuid_generate_v4(), "isDeleted" boolean NOT NULL DEFAULT true, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "lastChangedDateTime" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "HubId" character varying(50) NOT NULL, "PackageLenght" character varying(50) NOT NULL, "EepromAddress" character varying(50) NOT NULL, "Command" character varying(50) NOT NULL, "ReadingPeriod" character varying(50) NOT NULL, "RecieveType" character varying(50) NOT NULL, CONSTRAINT "PK_7e3a275d596086bb4bf1f3c2546" PRIMARY KEY ("ContentID"))`);
        await queryRunner.query(`CREATE TABLE "moistureSetupByHub" ("ContentID" uuid NOT NULL DEFAULT uuid_generate_v4(), "isDeleted" boolean NOT NULL DEFAULT true, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "lastChangedDateTime" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "HubId" character varying(50) NOT NULL, "PackageLenght" character varying(50) NOT NULL, "EepromAddress" character varying(50) NOT NULL, "Command" character varying(50) NOT NULL, "ReadingPeriod" character varying(50) NOT NULL, "RecieveType" character varying(50) NOT NULL, CONSTRAINT "PK_5bf1d84c82b2be67390738795ae" PRIMARY KEY ("ContentID"))`);
        await queryRunner.query(`CREATE TABLE "khasSetup" ("ContentID" uuid NOT NULL DEFAULT uuid_generate_v4(), "isDeleted" boolean NOT NULL DEFAULT true, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "lastChangedDateTime" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "HubGroupId" character varying(50) NOT NULL, "IrrigationTypes" character varying(50) NOT NULL, "DripperRanges" character varying(50) NOT NULL, "BaseHeight" character varying(50) NOT NULL, "Valve" character varying(50) NOT NULL, "SensorType" character varying(50) NOT NULL, "PlantType" character varying(50) NOT NULL, "DeviceLocation" character varying(50) NOT NULL, CONSTRAINT "PK_76ec251c670d888aa60fdd3ef70" PRIMARY KEY ("ContentID"))`);
        await queryRunner.query(`CREATE TABLE "moistureConditions" ("ContentID" uuid NOT NULL DEFAULT uuid_generate_v4(), "isDeleted" boolean NOT NULL DEFAULT true, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "lastChangedDateTime" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "KhasID" character varying(50) NOT NULL, "DeviceEeprom" character varying(50) NOT NULL, "ValveID" character varying(50) NOT NULL, "KhasCount" character varying(50) NOT NULL, "PositionID" character varying(50) NOT NULL, "ConditionID" character varying(50) NOT NULL, "ReadingCommand" character varying(50) NOT NULL, "ConditionEeprom" character varying(50) NOT NULL, "FieldRangeCondition" character varying(50) NOT NULL, "FieldRange" character varying(50) NOT NULL, "MaxRyRate" character varying(50) NOT NULL, "CheckKhasConWhenOver" boolean NOT NULL DEFAULT false, "StartIrrigationCondition" character varying(50) NOT NULL, "StartIrrigationConditionPoint" character varying(50) NOT NULL, CONSTRAINT "PK_d1a7f775edbee8dc051b4101b7f" PRIMARY KEY ("ContentID"))`);
        await queryRunner.query(`CREATE TABLE "lastKhasValues" ("ContentID" uuid NOT NULL DEFAULT uuid_generate_v4(), "isDeleted" boolean NOT NULL DEFAULT true, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "lastChangedDateTime" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "SmartCapillarityID" character varying(50) NOT NULL, "LastCalibrationDate" character varying(50) NOT NULL, "LastCalibrationMoisture" character varying(50) NOT NULL, "PressureSensorValue" character varying(50) NOT NULL, "LastIrrigationCount" character varying(50) NOT NULL, "DailyIrrigationCount" character varying(50) NOT NULL, "SeasonlyTotalIrrigation" character varying(50) NOT NULL, CONSTRAINT "PK_cd8868161ac1c67d9d0609ea9d1" PRIMARY KEY ("ContentID"))`);
        await queryRunner.query(`CREATE TABLE "smartCapillarityLogs" ("ContentID" uuid NOT NULL DEFAULT uuid_generate_v4(), "LogContent" character varying(350) NOT NULL, "LogTitle" character varying(350) NOT NULL, "LogDescription" character varying(350) NOT NULL, "LogStatus" character varying(50) NOT NULL, "isDeleted" boolean NOT NULL DEFAULT true, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "lastChangedDateTime" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "SmartCapillarityID" character varying(50) NOT NULL, CONSTRAINT "PK_6fc0c0f092d8a962823dba679b7" PRIMARY KEY ("ContentID"))`);
        await queryRunner.query(`CREATE TABLE "pressureSensorGroups" ("ContentID" uuid NOT NULL DEFAULT uuid_generate_v4(), "isDeleted" boolean NOT NULL DEFAULT true, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "lastChangedDateTime" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "PressureSensorSetupID" character varying(50) NOT NULL, "DeviceID" character varying(50) NOT NULL, "NameTr" character varying(50) NOT NULL, "NameEn" character varying(50) NOT NULL, "DeviceLocation" character varying(50) NOT NULL, CONSTRAINT "PK_33b7879824e09b66d86da9cf34b" PRIMARY KEY ("ContentID"))`);
        await queryRunner.query(`CREATE TABLE "pressureSensorLogs" ("ContentID" uuid NOT NULL DEFAULT uuid_generate_v4(), "LogContent" character varying(350) NOT NULL, "LogTitle" character varying(350) NOT NULL, "LogDescription" character varying(350) NOT NULL, "LogStatus" character varying(50) NOT NULL, "isDeleted" boolean NOT NULL DEFAULT true, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "lastChangedDateTime" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "PressureSensorID" character varying(50) NOT NULL, CONSTRAINT "PK_873b724efeed6a60c013583c56a" PRIMARY KEY ("ContentID"))`);
        await queryRunner.query(`CREATE TABLE "pressureSensorSetup" ("ContentID" uuid NOT NULL DEFAULT uuid_generate_v4(), "isDeleted" boolean NOT NULL DEFAULT true, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "lastChangedDateTime" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "PumpID" character varying(50) NOT NULL, "PressureSensorType" character varying(50) NOT NULL, "PressureSensorTypeCount" character varying(50) NOT NULL, CONSTRAINT "PK_3a174760e798822e1b06a13a4b8" PRIMARY KEY ("ContentID"))`);
        await queryRunner.query(`CREATE TABLE "smartCapillarity" ("ContentID" uuid NOT NULL DEFAULT uuid_generate_v4(), "isDeleted" boolean NOT NULL DEFAULT true, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "lastChangedDateTime" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "KhasSetupID" character varying(50) NOT NULL, "DeviceID" character varying(50) NOT NULL, "NameTr" character varying(50) NOT NULL, "NameEn" character varying(50) NOT NULL, "DeviceLocation" character varying(50) NOT NULL, "KhasResetCount" character varying(50) NOT NULL, "SensorRangeLimit" character varying(50) NOT NULL, "DigitalPercentLimitByRow" text array NOT NULL, CONSTRAINT "PK_b0ae5010e3e9c6e518f53470f51" PRIMARY KEY ("ContentID"))`);
        await queryRunner.query(`CREATE TABLE "pressureSensorParams" ("ContentID" uuid NOT NULL DEFAULT uuid_generate_v4(), "isDeleted" boolean NOT NULL DEFAULT true, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "lastChangedDateTime" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "ValveID" character varying(50) NOT NULL, "CheckPressureSensor" boolean NOT NULL DEFAULT false, "ValveStartValue" character varying(50) NOT NULL, "OpenTime" character varying(50) NOT NULL, "PressureValueWhenValveClosed" character varying(50) NOT NULL, "CloseTime" character varying(50) NOT NULL, CONSTRAINT "PK_d4fcb3f2e89b9a3e57e99d2db13" PRIMARY KEY ("ContentID"))`);
        await queryRunner.query(`CREATE TABLE "tParametersByValve" ("ContentID" uuid NOT NULL DEFAULT uuid_generate_v4(), "isDeleted" boolean NOT NULL DEFAULT true, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "lastChangedDateTime" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "ValveID" character varying(50) NOT NULL, "T1T3TargetValue" character varying(50) NOT NULL, "IncrementT1Time" character varying(50) NOT NULL, "ChangeT1Time" character varying(50) NOT NULL, "DecrementT1Time" character varying(50) NOT NULL, "T1TimeMinLimit" character varying(50) NOT NULL, "T1TimeMaxLimit" character varying(50) NOT NULL, "T2MinLimit" character varying(50) NOT NULL, "T2MaxLimit" character varying(50) NOT NULL, "IncrementT3Time" character varying(50) NOT NULL, "ChangeT3Time" character varying(50) NOT NULL, "DecrementT3Time" character varying(50) NOT NULL, "T3TimeMinLimit" character varying(50) NOT NULL, "T3TimeMaxLimit" character varying(50) NOT NULL, CONSTRAINT "PK_081d412c7d483278051f4d517a8" PRIMARY KEY ("ContentID"))`);
        await queryRunner.query(`CREATE TABLE "valveConditions" ("ContentID" uuid NOT NULL DEFAULT uuid_generate_v4(), "isDeleted" boolean NOT NULL DEFAULT true, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "lastChangedDateTime" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "ValveID" character varying(50) NOT NULL, "Eeprom" character varying(50) NOT NULL, "ValveManagement" character varying(50) NOT NULL, "ManagementType" character varying(50) NOT NULL, "StartHour" character varying(50) NOT NULL, "FinishHour" character varying(50) NOT NULL, "CheckDailyWorkHour" character varying(50) NOT NULL, "WorkTime" character varying(50) NOT NULL, "PendingTime" character varying(50) NOT NULL, "DailyTotalWorkTime" character varying(50) NOT NULL, CONSTRAINT "PK_565120f723f9fb5c226efd2139d" PRIMARY KEY ("ContentID"))`);
        await queryRunner.query(`CREATE TABLE "pumpLogs" ("ContentID" uuid NOT NULL DEFAULT uuid_generate_v4(), "LogContent" character varying(350) NOT NULL, "LogTitle" character varying(350) NOT NULL, "LogDescription" character varying(350) NOT NULL, "LogStatus" character varying(50) NOT NULL, "isDeleted" boolean NOT NULL DEFAULT true, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "lastChangedDateTime" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "PumpID" character varying(50) NOT NULL, CONSTRAINT "PK_19fd56fc09c337d028c8ad56965" PRIMARY KEY ("ContentID"))`);
        await queryRunner.query(`CREATE TABLE "pumpSetups" ("ContentID" uuid NOT NULL DEFAULT uuid_generate_v4(), "isDeleted" boolean NOT NULL DEFAULT true, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "lastChangedDateTime" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "HubGroupID" character varying(50) NOT NULL, "PumpType" character varying(50) NOT NULL, "PumpManagementType" character varying(50) NOT NULL, "ValveManagementType" character varying(50) NOT NULL, "DeviceID" character varying(50) NOT NULL, "DeviceNameTr" character varying(50) NOT NULL, "DeviceNameEn" character varying(50) NOT NULL, "DeviceLocation" character varying(50) NOT NULL, CONSTRAINT "PK_319b76c12f95ea071ecc5e46980" PRIMARY KEY ("ContentID"))`);
        await queryRunner.query(`CREATE TABLE "valveSetups" ("ContentID" uuid NOT NULL DEFAULT uuid_generate_v4(), "isDeleted" boolean NOT NULL DEFAULT true, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "lastChangedDateTime" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "PumpID" character varying(50) NOT NULL, "ValveType" character varying(50) NOT NULL, "ValveCount" character varying(50) NOT NULL, CONSTRAINT "PK_a5cf9ba012b5003a80f9bb1e28f" PRIMARY KEY ("ContentID"))`);
        await queryRunner.query(`CREATE TABLE "valveCardsGroups" ("ContentID" uuid NOT NULL DEFAULT uuid_generate_v4(), "isDeleted" boolean NOT NULL DEFAULT true, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "lastChangedDateTime" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "ValveSetupID" character varying(50) NOT NULL, "DeviceID" character varying(50) NOT NULL, "NameTr" character varying(50) NOT NULL, "NameEn" character varying(50) NOT NULL, "DeviceLocation" character varying(50) NOT NULL, "WaterMeter" character varying(50) NOT NULL, "WaterPressureSensor" character varying(50) NOT NULL, CONSTRAINT "PK_fe0f0693defa51fd90b8d96ca8b" PRIMARY KEY ("ContentID"))`);
        await queryRunner.query(`CREATE TABLE "waterMeterGroup" ("ContentID" uuid NOT NULL DEFAULT uuid_generate_v4(), "isDeleted" boolean NOT NULL DEFAULT true, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "lastChangedDateTime" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "WaterMeterSetupID" character varying(50) NOT NULL, "DeviceID" character varying(50) NOT NULL, "NameTr" character varying(50) NOT NULL, "NameEn" character varying(50) NOT NULL, "DeviceLocation" character varying(50) NOT NULL, CONSTRAINT "PK_dcf8fbee4d613959cd05c973b28" PRIMARY KEY ("ContentID"))`);
        await queryRunner.query(`CREATE TABLE "waterMeterLogs" ("ContentID" uuid NOT NULL DEFAULT uuid_generate_v4(), "LogContent" character varying(350) NOT NULL, "LogTitle" character varying(350) NOT NULL, "LogDescription" character varying(350) NOT NULL, "LogStatus" character varying(50) NOT NULL, "isDeleted" boolean NOT NULL DEFAULT true, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "lastChangedDateTime" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "WaterMeterID" character varying(50) NOT NULL, CONSTRAINT "PK_9ba443b0d959bb0a2f8621e4229" PRIMARY KEY ("ContentID"))`);
        await queryRunner.query(`CREATE TABLE "waterMeterSetup" ("ContentID" uuid NOT NULL DEFAULT uuid_generate_v4(), "isDeleted" boolean NOT NULL DEFAULT true, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "lastChangedDateTime" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "PumpID" character varying(50) NOT NULL, "WaterMeterContactType" character varying(50) NOT NULL, "WaterMeterCount" character varying(50) NOT NULL, CONSTRAINT "PK_4d9f906d5f6d1f9a8170125c571" PRIMARY KEY ("ContentID"))`);
        await queryRunner.query(`ALTER TABLE "devicesLocation" ALTER COLUMN "ImageUrl" DROP DEFAULT`);
    }

    public async down(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`ALTER TABLE "devicesLocation" ALTER COLUMN "ImageUrl" SET DEFAULT ''`);
        await queryRunner.query(`DROP TABLE "waterMeterSetup"`);
        await queryRunner.query(`DROP TABLE "waterMeterLogs"`);
        await queryRunner.query(`DROP TABLE "waterMeterGroup"`);
        await queryRunner.query(`DROP TABLE "valveCardsGroups"`);
        await queryRunner.query(`DROP TABLE "valveSetups"`);
        await queryRunner.query(`DROP TABLE "pumpSetups"`);
        await queryRunner.query(`DROP TABLE "pumpLogs"`);
        await queryRunner.query(`DROP TABLE "valveConditions"`);
        await queryRunner.query(`DROP TABLE "tParametersByValve"`);
        await queryRunner.query(`DROP TABLE "pressureSensorParams"`);
        await queryRunner.query(`DROP TABLE "smartCapillarity"`);
        await queryRunner.query(`DROP TABLE "pressureSensorSetup"`);
        await queryRunner.query(`DROP TABLE "pressureSensorLogs"`);
        await queryRunner.query(`DROP TABLE "pressureSensorGroups"`);
        await queryRunner.query(`DROP TABLE "smartCapillarityLogs"`);
        await queryRunner.query(`DROP TABLE "lastKhasValues"`);
        await queryRunner.query(`DROP TABLE "moistureConditions"`);
        await queryRunner.query(`DROP TABLE "khasSetup"`);
        await queryRunner.query(`DROP TABLE "moistureSetupByHub"`);
        await queryRunner.query(`DROP TABLE "khasSetupByHub"`);
        await queryRunner.query(`DROP TABLE "hubLogs"`);
        await queryRunner.query(`DROP TABLE "hubSetup"`);
        await queryRunner.query(`DROP TABLE "hubGroups"`);
        await queryRunner.query(`DROP TABLE "hubDateHour"`);
        await queryRunner.query(`DROP TABLE "hubGroupLogs"`);
        await queryRunner.query(`DROP TABLE "hubs"`);
    }

}
