import { MigrationInterface, QueryRunner } from "typeorm";

export class migration1658908557480 implements MigrationInterface {
    name = 'migration1658908557480'

    public async up(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`CREATE TABLE "devicesLocation" ("ContentID" uuid NOT NULL DEFAULT uuid_generate_v4(), "isDeleted" boolean NOT NULL DEFAULT true, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "lastChangedDateTime" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "TitleTR" character varying(50) NOT NULL, "TitleEN" character varying(50) NOT NULL, "ImageUrl" character varying(50) NOT NULL, CONSTRAINT "PK_85f2657f5a19471d1d5b530fbe3" PRIMARY KEY ("ContentID"))`);
        await queryRunner.query(`CREATE TABLE "irrigationTypes" ("ContentID" uuid NOT NULL DEFAULT uuid_generate_v4(), "isDeleted" boolean NOT NULL DEFAULT true, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "lastChangedDateTime" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "TitleTR" character varying(50) NOT NULL, "TitleEN" character varying(50) NOT NULL, "ImageUrl" character varying(50) NOT NULL, CONSTRAINT "PK_66b09f500dc494ba46968b674f0" PRIMARY KEY ("ContentID"))`);
        await queryRunner.query(`CREATE TABLE "deviceTypes" ("ContentID" uuid NOT NULL DEFAULT uuid_generate_v4(), "isDeleted" boolean NOT NULL DEFAULT true, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "lastChangedDateTime" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "Name" character varying(50) NOT NULL, CONSTRAINT "PK_47fe3867b334248584dc7848b77" PRIMARY KEY ("ContentID"))`);
        await queryRunner.query(`CREATE TABLE "modemImeriRecords" ("ContentID" uuid NOT NULL DEFAULT uuid_generate_v4(), "isDeleted" boolean NOT NULL DEFAULT true, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "lastChangedDateTime" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "GatewayID" character varying(50) NOT NULL, "UserID" character varying(50) NOT NULL, "ImeiNumber" character varying(50) NOT NULL, CONSTRAINT "PK_0257cd6447401676ccdbc754435" PRIMARY KEY ("ContentID"))`);
        await queryRunner.query(`CREATE TABLE "simCards" ("ContentID" uuid NOT NULL DEFAULT uuid_generate_v4(), "isDeleted" boolean NOT NULL DEFAULT true, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "lastChangedDateTime" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "GatewayID" character varying(50) NOT NULL, "UserID" character varying(50) NOT NULL, "SerialNumber" character varying(50) NOT NULL, "StaticIP" character varying(50) NOT NULL, "Port" character varying(50) NOT NULL, CONSTRAINT "PK_6fc6954baf7f32e2e167a53819c" PRIMARY KEY ("ContentID"))`);
        await queryRunner.query(`CREATE TABLE "plants" ("ContentID" uuid NOT NULL DEFAULT uuid_generate_v4(), "isDeleted" boolean NOT NULL DEFAULT true, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "lastChangedDateTime" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "TitleTR" character varying(50) NOT NULL, "TitleEN" character varying(50) NOT NULL, "RootRange" character varying(50) NOT NULL, "ActiveRootRange" character varying(50) NOT NULL, CONSTRAINT "PK_220594fac1298d0aa17b449682e" PRIMARY KEY ("ContentID"))`);
        await queryRunner.query(`CREATE TABLE "gateway" ("ContentID" uuid NOT NULL DEFAULT uuid_generate_v4(), "isDeleted" boolean NOT NULL DEFAULT true, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "lastChangedDateTime" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "SalesID" character varying(50) NOT NULL, "UserID" character varying(50) NOT NULL, "Name" character varying(75) NOT NULL, "Lang" character varying(75) NOT NULL, "Lat" character varying(75) NOT NULL, "ServerIP" character varying(75) NOT NULL, "ServerPort" character varying(75) NOT NULL, "GatewayIP" character varying(75) NOT NULL, "GatewayPort" character varying(75) NOT NULL, "TelitClientPort" character varying(75) NOT NULL, CONSTRAINT "PK_bb4b4bdedb7acad655d7ba2cb39" PRIMARY KEY ("ContentID"))`);
        await queryRunner.query(`CREATE TABLE "gatewayFields" ("ContentID" uuid NOT NULL DEFAULT uuid_generate_v4(), "isDeleted" boolean NOT NULL DEFAULT true, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "lastChangedDateTime" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "GatewayID" character varying(50) NOT NULL, "Name" character varying(50) NOT NULL, "Description" character varying(50) NOT NULL, "Lang" character varying(50) NOT NULL, "Lat" character varying(50) NOT NULL, CONSTRAINT "PK_989edb1d80c6a2a2ef812557d3f" PRIMARY KEY ("ContentID"))`);
        await queryRunner.query(`CREATE TABLE "gatewayKhasConditions" ("ContentID" uuid NOT NULL DEFAULT uuid_generate_v4(), "isDeleted" boolean NOT NULL DEFAULT true, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "lastChangedDateTime" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "GatewayID" character varying(50) NOT NULL, "PackageLenght" character varying(50) NOT NULL, "EepromAddress" character varying(50) NOT NULL, "Command" character varying(50) NOT NULL, "ReadPeriod" character varying(50) NOT NULL, "SendingType" character varying(50) NOT NULL, CONSTRAINT "PK_33236980c8c37859ff39d65ac7b" PRIMARY KEY ("ContentID"))`);
        await queryRunner.query(`CREATE TABLE "gatewayMoistureConditions" ("ContentID" uuid NOT NULL DEFAULT uuid_generate_v4(), "isDeleted" boolean NOT NULL DEFAULT true, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "lastChangedDateTime" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "GatewayID" character varying(50) NOT NULL, "PackageLenght" character varying(50) NOT NULL, "EepromAddress" character varying(50) NOT NULL, "Command" character varying(50) NOT NULL, "ReadPeriod" character varying(50) NOT NULL, "SendingType" character varying(50) NOT NULL, CONSTRAINT "PK_54aa19ade7a484cfda578635f76" PRIMARY KEY ("ContentID"))`);
        await queryRunner.query(`CREATE TABLE "gatewayLogs" ("ContentID" uuid NOT NULL DEFAULT uuid_generate_v4(), "LogContent" character varying(350) NOT NULL, "LogTitle" character varying(350) NOT NULL, "LogDescription" character varying(350) NOT NULL, "LogStatus" character varying(50) NOT NULL, "isDeleted" boolean NOT NULL DEFAULT true, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "lastChangedDateTime" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "GatewayID" character varying(50) NOT NULL, CONSTRAINT "PK_092e7b16ca63ea2cc66fa1070c6" PRIMARY KEY ("ContentID"))`);
        await queryRunner.query(`CREATE TABLE "smartRootDetailFirst" ("ContentID" uuid NOT NULL DEFAULT uuid_generate_v4(), "isDeleted" boolean NOT NULL DEFAULT true, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "lastChangedDateTime" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "SmartRootID" character varying(50) NOT NULL, "Sensors" text array NOT NULL, "SensorDatas" text array NOT NULL, CONSTRAINT "PK_2e702426488653a18cf1c7a49bf" PRIMARY KEY ("ContentID"))`);
        await queryRunner.query(`CREATE TABLE "smartRoot" ("ContentID" uuid NOT NULL DEFAULT uuid_generate_v4(), "isDeleted" boolean NOT NULL DEFAULT true, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "lastChangedDateTime" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "GatewayID" character varying(50) NOT NULL, "Name" character varying(50) NOT NULL, CONSTRAINT "PK_97dcdc58600969dc964f9a08b0f" PRIMARY KEY ("ContentID"))`);
        await queryRunner.query(`CREATE TABLE "smartRootDetailSecond" ("ContentID" uuid NOT NULL DEFAULT uuid_generate_v4(), "isDeleted" boolean NOT NULL DEFAULT true, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "lastChangedDateTime" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "SmartRootID" character varying(50) NOT NULL, "Sensors" text array NOT NULL, "SensorDatas" text array NOT NULL, CONSTRAINT "PK_a2c6ef2bb11451eac7645847fb6" PRIMARY KEY ("ContentID"))`);
        await queryRunner.query(`CREATE TABLE "workGroupLogs" ("ContentID" uuid NOT NULL DEFAULT uuid_generate_v4(), "LogContent" character varying(350) NOT NULL, "LogTitle" character varying(350) NOT NULL, "LogDescription" character varying(350) NOT NULL, "LogStatus" character varying(50) NOT NULL, "isDeleted" boolean NOT NULL DEFAULT true, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "lastChangedDateTime" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "WorkGroupID" character varying(50) NOT NULL, CONSTRAINT "PK_00ccffe9d17b31328507892ff0f" PRIMARY KEY ("ContentID"))`);
        await queryRunner.query(`CREATE TABLE "workGroup" ("ContentID" uuid NOT NULL DEFAULT uuid_generate_v4(), "isDeleted" boolean NOT NULL DEFAULT true, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "lastChangedDateTime" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "GatewayID" character varying(50) NOT NULL, "Name" character varying(50) NOT NULL, "WorkType" character varying(50) NOT NULL, "Description" character varying(50) NOT NULL, CONSTRAINT "PK_b7fb4f85e237fd345df71e32514" PRIMARY KEY ("ContentID"))`);
        await queryRunner.query(`CREATE TABLE "pumpManagementTypes" ("ContentID" uuid NOT NULL DEFAULT uuid_generate_v4(), "isDeleted" boolean NOT NULL DEFAULT true, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "lastChangedDateTime" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "TitleTR" character varying(50) NOT NULL, "TitleEN" character varying(50) NOT NULL, CONSTRAINT "PK_b495c69c164ab1764df8294709a" PRIMARY KEY ("ContentID"))`);
        await queryRunner.query(`CREATE TABLE "manuelValveStrategies" ("ContentID" uuid NOT NULL DEFAULT uuid_generate_v4(), "isDeleted" boolean NOT NULL DEFAULT true, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "lastChangedDateTime" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "SensorCardID" character varying(50) NOT NULL, "StrategyType" character varying(50) NOT NULL, "Params" character varying(55) NOT NULL, "CloseValve" character varying(55) NOT NULL, "Message" character varying(55) NOT NULL, CONSTRAINT "PK_e262ea07585135315ef13addc11" PRIMARY KEY ("ContentID"))`);
        await queryRunner.query(`CREATE TABLE "sensorCardLogs" ("ContentID" uuid NOT NULL DEFAULT uuid_generate_v4(), "LogContent" character varying(350) NOT NULL, "LogTitle" character varying(350) NOT NULL, "LogDescription" character varying(350) NOT NULL, "LogStatus" character varying(50) NOT NULL, "isDeleted" boolean NOT NULL DEFAULT true, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "lastChangedDateTime" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "SensorCardID" character varying(50) NOT NULL, CONSTRAINT "PK_34445597af42847dd48e523ac4c" PRIMARY KEY ("ContentID"))`);
        await queryRunner.query(`CREATE TABLE "sensorCardParams" ("ContentID" uuid NOT NULL DEFAULT uuid_generate_v4(), "isDeleted" boolean NOT NULL DEFAULT true, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "lastChangedDateTime" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "SensorCardID" character varying(50) NOT NULL, "StartTime" character varying(50) NOT NULL, "FinishTime" character varying(50) NOT NULL, "WorkTime" character varying(50) NOT NULL, "WaitTime" character varying(50) NOT NULL, "SummaryWorkTime" character varying(50) NOT NULL, "DailySummaryWorkTime" character varying(50) NOT NULL, "CheckDailySummaryWorkTime" character varying(50) NOT NULL, "TkValue" character varying(50) NOT NULL, "MoistureRate" character varying(50) NOT NULL, "StartIrrigationPoint" character varying(50) NOT NULL, "FieldCondition" character varying(50) NOT NULL, "FieldRange" character varying(50) NOT NULL, "RyRate" character varying(50) NOT NULL, "StartIrrigationPointCondition" character varying(50) NOT NULL, "ValveManagement" character varying(50) NOT NULL, "ManagementType" character varying(50) NOT NULL, "CloseValveTarget" character varying(50) NOT NULL, "T1T3TargetValue" character varying(50) NOT NULL, "IncrementT1Time" character varying(50) NOT NULL, "ChangeT1Time" character varying(50) NOT NULL, "DecrementT1Time" character varying(50) NOT NULL, "T1TimeDownLimit" character varying(50) NOT NULL, "T1TimeUpLimit" character varying(50) NOT NULL, "T2TimeDownLimit" character varying(50) NOT NULL, "T2TimeUpLimit" character varying(50) NOT NULL, "IncrementT3Time" character varying(50) NOT NULL, "ChangeT3Time" character varying(50) NOT NULL, "DecrementT3Time" character varying(50) NOT NULL, "T3TimeDownLimit" character varying(50) NOT NULL, "T3TimeUpLimit" character varying(50) NOT NULL, "TargetKhasRow" character varying(50) NOT NULL, "TargetKhasCol" character varying(50) NOT NULL, "CheckPressureSensor" character varying(50) NOT NULL, "ValveWorkPressureValue" character varying(50) NOT NULL, "OpenTime" character varying(50) NOT NULL, "WhenValveCloseBarValue" character varying(50) NOT NULL, "CloseTime" character varying(50) NOT NULL, "KhasResetCount" character varying(50) NOT NULL, "SensorRangeLimit" character varying(50) NOT NULL, "SensorDigitalRateLimit" text array NOT NULL, CONSTRAINT "PK_c7c5768574ac57d5a3f30730e1d" PRIMARY KEY ("ContentID"))`);
        await queryRunner.query(`CREATE TABLE "sensorCalibrationLog" ("ContentID" uuid NOT NULL DEFAULT uuid_generate_v4(), "isDeleted" boolean NOT NULL DEFAULT true, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "lastChangedDateTime" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "SensorCardID" character varying(50) NOT NULL, "Sensors" text array NOT NULL, "SensorDatas" text array NOT NULL, "GetDataAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), CONSTRAINT "PK_09cdf324c577f910d4c002cc401" PRIMARY KEY ("ContentID"))`);
        await queryRunner.query(`CREATE TABLE "sensorCards" ("ContentID" uuid NOT NULL DEFAULT uuid_generate_v4(), "isDeleted" boolean NOT NULL DEFAULT true, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "lastChangedDateTime" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "WorkGroupID" character varying(50) NOT NULL, "Name" character varying(50) NOT NULL, "ConnectPeriodWhenStop" integer NOT NULL, "ConnectPeriodWhenWork" integer NOT NULL, "IrrigationTypes" character varying(50) NOT NULL, "DripperRanges" character varying(50) NOT NULL, "SensorType" character varying(50) NOT NULL, "PlantType" character varying(50) NOT NULL, "SensorLocation" character varying(50) NOT NULL, CONSTRAINT "PK_da1706b556fd6ce88df1fb5c493" PRIMARY KEY ("ContentID"))`);
        await queryRunner.query(`CREATE TABLE "valveCards" ("ContentID" uuid NOT NULL DEFAULT uuid_generate_v4(), "isDeleted" boolean NOT NULL DEFAULT true, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "lastChangedDateTime" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "TimerManagementID" character varying(50) NOT NULL, "SensorCardID" character varying(50) NOT NULL, "Name" character varying(50) NOT NULL, "Days" text array NOT NULL, "StartHour" character varying(50) NOT NULL, "FinishHour" character varying(50) NOT NULL, "TotalWorkTime" character varying(50) NOT NULL, "IsAuto" boolean NOT NULL DEFAULT false, CONSTRAINT "PK_4b51d69c4f69dfae041bf07a1f0" PRIMARY KEY ("ContentID"))`);
        await queryRunner.query(`CREATE TABLE "sensorMoistureLog" ("ContentID" uuid NOT NULL DEFAULT uuid_generate_v4(), "isDeleted" boolean NOT NULL DEFAULT true, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "lastChangedDateTime" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "SensorCardID" character varying(50) NOT NULL, "Sensors" text array NOT NULL, "SensorDatas" text array NOT NULL, "GetDataAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), CONSTRAINT "PK_49f8a1a7f17a03e0ea48fba9025" PRIMARY KEY ("ContentID"))`);
        await queryRunner.query(`CREATE TABLE "timerManagement" ("ContentID" uuid NOT NULL DEFAULT uuid_generate_v4(), "isDeleted" boolean NOT NULL DEFAULT true, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "lastChangedDateTime" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "WorkGroupID" character varying(50) NOT NULL, "TimerName" character varying(50) NOT NULL, CONSTRAINT "PK_2454709885fa95c9f5dfc5fb37d" PRIMARY KEY ("ContentID"))`);
        await queryRunner.query(`CREATE TABLE "timerManagementLogs" ("ContentID" uuid NOT NULL DEFAULT uuid_generate_v4(), "LogContent" character varying(350) NOT NULL, "LogTitle" character varying(350) NOT NULL, "LogDescription" character varying(350) NOT NULL, "LogStatus" character varying(50) NOT NULL, "isDeleted" boolean NOT NULL DEFAULT true, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "lastChangedDateTime" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "TimerManagementID" character varying(50) NOT NULL, CONSTRAINT "PK_d78f6bf9c627eae55da7c0868ff" PRIMARY KEY ("ContentID"))`);
        await queryRunner.query(`CREATE TABLE "pumpCardLogs" ("ContentID" uuid NOT NULL DEFAULT uuid_generate_v4(), "LogContent" character varying(350) NOT NULL, "LogTitle" character varying(350) NOT NULL, "LogDescription" character varying(350) NOT NULL, "LogStatus" character varying(50) NOT NULL, "isDeleted" boolean NOT NULL DEFAULT true, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "lastChangedDateTime" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "PumpCardID" character varying(50) NOT NULL, CONSTRAINT "PK_6a13b43fe27200e18405a3aaa01" PRIMARY KEY ("ContentID"))`);
        await queryRunner.query(`CREATE TABLE "pumpCards" ("ContentID" uuid NOT NULL DEFAULT uuid_generate_v4(), "isDeleted" boolean NOT NULL DEFAULT true, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "lastChangedDateTime" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "ValveID" character varying(50) NOT NULL, "SensorCardID" character varying(50) NOT NULL, "Name" character varying(50) NOT NULL, "ValveManagementType" character varying(50) NOT NULL, "PumpManagementType" character varying(50) NOT NULL, "PressureSensor" boolean NOT NULL DEFAULT false, "PressureUpLimit" character varying(50) NOT NULL, "PressureDownLimit" boolean NOT NULL DEFAULT false, "ConnectPeriodWhenWork" character varying(50) NOT NULL, "ConnectPeriodWhenStop" character varying(50) NOT NULL, "WaterMeter" boolean NOT NULL DEFAULT false, "LitrePulseCount" character varying(50) NOT NULL, "DigitalPump" boolean NOT NULL DEFAULT false, "Description" character varying(50) NOT NULL, CONSTRAINT "PK_3ec37215da91100236dc752222d" PRIMARY KEY ("ContentID"))`);
        await queryRunner.query(`CREATE TABLE "valveCardLogs" ("ContentID" uuid NOT NULL DEFAULT uuid_generate_v4(), "LogContent" character varying(350) NOT NULL, "LogTitle" character varying(350) NOT NULL, "LogDescription" character varying(350) NOT NULL, "LogStatus" character varying(50) NOT NULL, "isDeleted" boolean NOT NULL DEFAULT true, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "lastChangedDateTime" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "ValveCardID" character varying(50) NOT NULL, CONSTRAINT "PK_b41889db38af9d62a58477edd05" PRIMARY KEY ("ContentID"))`);
        await queryRunner.query(`ALTER TABLE "valveCards" DROP COLUMN "Days"`);
        await queryRunner.query(`ALTER TABLE "valveCards" DROP COLUMN "StartHour"`);
        await queryRunner.query(`ALTER TABLE "valveCards" DROP COLUMN "FinishHour"`);
        await queryRunner.query(`ALTER TABLE "valveCards" DROP COLUMN "TotalWorkTime"`);
        await queryRunner.query(`ALTER TABLE "valveCards" DROP COLUMN "IsAuto"`);
        await queryRunner.query(`ALTER TABLE "valveCards" ADD "Days" text array NOT NULL`);
        await queryRunner.query(`ALTER TABLE "valveCards" ADD "StartHour" character varying(50) NOT NULL`);
        await queryRunner.query(`ALTER TABLE "valveCards" ADD "FinishHour" character varying(50) NOT NULL`);
        await queryRunner.query(`ALTER TABLE "valveCards" ADD "TotalWorkTime" character varying(50) NOT NULL`);
        await queryRunner.query(`ALTER TABLE "valveCards" ADD "IsAuto" boolean NOT NULL DEFAULT false`);
        await queryRunner.query(`ALTER TABLE "valveCards" ADD "WorkGroupID" character varying(50) NOT NULL`);
        await queryRunner.query(`ALTER TABLE "valveCards" ADD "PressureSensor" boolean NOT NULL DEFAULT false`);
        await queryRunner.query(`ALTER TABLE "valveCards" ADD "PressureMin" character varying(50) NOT NULL`);
        await queryRunner.query(`ALTER TABLE "valveCards" ADD "PressureMax" character varying(50) NOT NULL`);
        await queryRunner.query(`ALTER TABLE "valveCards" ADD "WaterMeter" boolean NOT NULL DEFAULT false`);
        await queryRunner.query(`ALTER TABLE "valveCards" ADD "ConnectPeriodWhenWork" character varying(50) NOT NULL`);
        await queryRunner.query(`ALTER TABLE "valveCards" ADD "ConnectPeriodWhenStop" character varying(50) NOT NULL`);
        await queryRunner.query(`ALTER TABLE "valveCards" ADD "LitreMinCount" character varying(50) NOT NULL`);
        await queryRunner.query(`ALTER TABLE "valveCards" ADD "LitrePulseCount" character varying(50) NOT NULL`);
        await queryRunner.query(`ALTER TABLE "valveCards" ADD "Description" character varying(50) NOT NULL`);
        await queryRunner.query(`ALTER TABLE "valveCards" ADD "ValveType" character varying(50) NOT NULL`);
        await queryRunner.query(`ALTER TABLE "valveCards" ADD "ValveTypeCount" character varying(50) NOT NULL`);
        await queryRunner.query(`ALTER TABLE "valveCards" ADD "Eeprom" character varying(50) NOT NULL`);
        await queryRunner.query(`ALTER TABLE "valveCards" ADD "LastConnection" character varying(50) NOT NULL`);
        await queryRunner.query(`ALTER TABLE "valveCards" ADD "ValveExit" character varying(50) NOT NULL`);
        await queryRunner.query(`ALTER TABLE "valveCards" ADD "MoistureBox" character varying(50) NOT NULL`);
        await queryRunner.query(`ALTER TABLE "valveCards" ADD "Tempeture" character varying(50) NOT NULL`);
        await queryRunner.query(`ALTER TABLE "valveCards" ADD "Voltage" character varying(50) NOT NULL`);
        await queryRunner.query(`ALTER TABLE "valveCards" ADD "WorkMode" character varying(50) NOT NULL`);
        await queryRunner.query(`ALTER TABLE "valveCards" ADD "IsOpen" boolean NOT NULL DEFAULT false`);
        await queryRunner.query(`ALTER TABLE "valveCards" ADD "Error" character varying(50) NOT NULL`);
    }

    public async down(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`ALTER TABLE "valveCards" DROP COLUMN "Error"`);
        await queryRunner.query(`ALTER TABLE "valveCards" DROP COLUMN "IsOpen"`);
        await queryRunner.query(`ALTER TABLE "valveCards" DROP COLUMN "WorkMode"`);
        await queryRunner.query(`ALTER TABLE "valveCards" DROP COLUMN "Voltage"`);
        await queryRunner.query(`ALTER TABLE "valveCards" DROP COLUMN "Tempeture"`);
        await queryRunner.query(`ALTER TABLE "valveCards" DROP COLUMN "MoistureBox"`);
        await queryRunner.query(`ALTER TABLE "valveCards" DROP COLUMN "ValveExit"`);
        await queryRunner.query(`ALTER TABLE "valveCards" DROP COLUMN "LastConnection"`);
        await queryRunner.query(`ALTER TABLE "valveCards" DROP COLUMN "Eeprom"`);
        await queryRunner.query(`ALTER TABLE "valveCards" DROP COLUMN "ValveTypeCount"`);
        await queryRunner.query(`ALTER TABLE "valveCards" DROP COLUMN "ValveType"`);
        await queryRunner.query(`ALTER TABLE "valveCards" DROP COLUMN "Description"`);
        await queryRunner.query(`ALTER TABLE "valveCards" DROP COLUMN "LitrePulseCount"`);
        await queryRunner.query(`ALTER TABLE "valveCards" DROP COLUMN "LitreMinCount"`);
        await queryRunner.query(`ALTER TABLE "valveCards" DROP COLUMN "ConnectPeriodWhenStop"`);
        await queryRunner.query(`ALTER TABLE "valveCards" DROP COLUMN "ConnectPeriodWhenWork"`);
        await queryRunner.query(`ALTER TABLE "valveCards" DROP COLUMN "WaterMeter"`);
        await queryRunner.query(`ALTER TABLE "valveCards" DROP COLUMN "PressureMax"`);
        await queryRunner.query(`ALTER TABLE "valveCards" DROP COLUMN "PressureMin"`);
        await queryRunner.query(`ALTER TABLE "valveCards" DROP COLUMN "PressureSensor"`);
        await queryRunner.query(`ALTER TABLE "valveCards" DROP COLUMN "WorkGroupID"`);
        await queryRunner.query(`ALTER TABLE "valveCards" DROP COLUMN "IsAuto"`);
        await queryRunner.query(`ALTER TABLE "valveCards" DROP COLUMN "TotalWorkTime"`);
        await queryRunner.query(`ALTER TABLE "valveCards" DROP COLUMN "FinishHour"`);
        await queryRunner.query(`ALTER TABLE "valveCards" DROP COLUMN "StartHour"`);
        await queryRunner.query(`ALTER TABLE "valveCards" DROP COLUMN "Days"`);
        await queryRunner.query(`ALTER TABLE "valveCards" ADD "IsAuto" boolean NOT NULL DEFAULT false`);
        await queryRunner.query(`ALTER TABLE "valveCards" ADD "TotalWorkTime" character varying(50) NOT NULL`);
        await queryRunner.query(`ALTER TABLE "valveCards" ADD "FinishHour" character varying(50) NOT NULL`);
        await queryRunner.query(`ALTER TABLE "valveCards" ADD "StartHour" character varying(50) NOT NULL`);
        await queryRunner.query(`ALTER TABLE "valveCards" ADD "Days" text array NOT NULL`);
        await queryRunner.query(`DROP TABLE "valveCardLogs"`);
        await queryRunner.query(`DROP TABLE "pumpCards"`);
        await queryRunner.query(`DROP TABLE "pumpCardLogs"`);
        await queryRunner.query(`DROP TABLE "timerManagementLogs"`);
        await queryRunner.query(`DROP TABLE "timerManagement"`);
        await queryRunner.query(`DROP TABLE "sensorMoistureLog"`);
        await queryRunner.query(`DROP TABLE "valveCards"`);
        await queryRunner.query(`DROP TABLE "sensorCards"`);
        await queryRunner.query(`DROP TABLE "sensorCalibrationLog"`);
        await queryRunner.query(`DROP TABLE "sensorCardParams"`);
        await queryRunner.query(`DROP TABLE "sensorCardLogs"`);
        await queryRunner.query(`DROP TABLE "manuelValveStrategies"`);
        await queryRunner.query(`DROP TABLE "pumpManagementTypes"`);
        await queryRunner.query(`DROP TABLE "workGroup"`);
        await queryRunner.query(`DROP TABLE "workGroupLogs"`);
        await queryRunner.query(`DROP TABLE "smartRootDetailSecond"`);
        await queryRunner.query(`DROP TABLE "smartRoot"`);
        await queryRunner.query(`DROP TABLE "smartRootDetailFirst"`);
        await queryRunner.query(`DROP TABLE "gatewayLogs"`);
        await queryRunner.query(`DROP TABLE "gatewayMoistureConditions"`);
        await queryRunner.query(`DROP TABLE "gatewayKhasConditions"`);
        await queryRunner.query(`DROP TABLE "gatewayFields"`);
        await queryRunner.query(`DROP TABLE "gateway"`);
        await queryRunner.query(`DROP TABLE "plants"`);
        await queryRunner.query(`DROP TABLE "simCards"`);
        await queryRunner.query(`DROP TABLE "modemImeriRecords"`);
        await queryRunner.query(`DROP TABLE "deviceTypes"`);
        await queryRunner.query(`DROP TABLE "irrigationTypes"`);
        await queryRunner.query(`DROP TABLE "devicesLocation"`);
    }

}
